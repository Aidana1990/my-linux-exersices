In Unix-like operating systems, signals are used to communicate with processes, allowing for various actions such as interrupting execution or handling terminal closures. This exercise will guide you through managing processes and signals using commands in a Unix-like environment.

Signals in Unix-like systems are software interrupts that can be generated by users, the kernel, or other processes. Two common signals are SIGINT (Signal Interrupt) and SIGHUP (Signal Hangup).

Open a terminal: Launch a terminal window to execute commands.

List available signals: Run the following command to list all available signals: kill -l

Start a long-running process in the foreground: Execute the following command to start a long-running process (e.g., sleep) in the foreground: sleep 23232

While the process is running, press Ctrl+C to interrupt it. Notice that the process terminates due to the SIGINT signal.

Start the same process in the background with nohup: Start the same long-running process in the background using the nohup command to ignore hangup signals: nohup sleep 23232 &

Press Ctrl+C to interrupt it and run the jobs command to verify that the process is running in the background.

Obtain the PID of the background process: Use the following command to obtain the PID of the background process: ps aux | grep sleep. Note the PID displayed in the output.

Visualize the process tree: Run the following command to visualize the process tree starting from the background process's PID: pstree -s <PID>. Replace <PID> with the PID obtained in the previous step.

Simulate terminal closure: Simulate the closure of the terminal without actually closing it by sending a SIGHUP signal to the background process: kill -SIGHUP <PID>.

Verify that the process continues running despite the simulated terminal closure by running the jobs command.

Verify the process is still running: Finally, confirm that the process is still running using the following command: ps aux | grep sleep. This command will display information about all processes containing the specified name in their command line. If the process is still running, its details will be shown in the output.

Terminate the process using pkill: If needed, you can use the pkill command to terminate processes based on their names: pkill sleep

Run the 'pwd' command to display the current working directory.

